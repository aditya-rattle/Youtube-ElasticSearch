// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "personal-project/fampay-assignment/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetPaginatedResponse mocks base method.
func (m *MockIService) GetPaginatedResponse(pageSize, pageNumber int32) ([]models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedResponse", pageSize, pageNumber)
	ret0, _ := ret[0].([]models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedResponse indicates an expected call of GetPaginatedResponse.
func (mr *MockIServiceMockRecorder) GetPaginatedResponse(pageSize, pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedResponse", reflect.TypeOf((*MockIService)(nil).GetPaginatedResponse), pageSize, pageNumber)
}

// GetQueryResponse mocks base method.
func (m *MockIService) GetQueryResponse(query string) ([]models.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryResponse", query)
	ret0, _ := ret[0].([]models.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryResponse indicates an expected call of GetQueryResponse.
func (mr *MockIServiceMockRecorder) GetQueryResponse(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResponse", reflect.TypeOf((*MockIService)(nil).GetQueryResponse), query)
}

// StartFetchingCron mocks base method.
func (m *MockIService) StartFetchingCron(query string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartFetchingCron", query)
}

// StartFetchingCron indicates an expected call of StartFetchingCron.
func (mr *MockIServiceMockRecorder) StartFetchingCron(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFetchingCron", reflect.TypeOf((*MockIService)(nil).StartFetchingCron), query)
}
